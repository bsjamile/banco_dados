/*PSQL NO ORACLE*/

--DATA:
--CHAMADO:
--SOLICITANTE:
--OBJETIVO:

SELECT * FROM DICT;

--USUARIO DO BANCO DE DADOS

SHOW USER;

--TABELA DUMMY - IDIOTA
--TUDO DO ORACLE TEM QUE VIR DE ALGUM LUGAR
--ENTAO SELECT 1 + 1; APENAS NAO VAI FUNCIONAR

SELECT 1 + 1 AS SOMA FROM DUAL; --SEMPRE QUE EU QUISER 
--FAZER UM SELECT QUE NAO EXISTE TABELA, A ORIGEM É A TABELA DUAL

SELECT 1 + 1 FROM DUAL;

SELECT 1 + 1, 'SOMA' FROM DUAL;

/* VERIFICANDO O AMBIENTE */
-- B023 -> 32 BITS
-- B0047 -> 64 BITS

SELECT METADATA FROM SYS.KOPM$;

--DICIONARIO DE DADOS

SELECT * FROM DICT;

-- INSTANCIA UNICA OU INTANCIA RAC
--EU ESTOU UTILIZANDO PARALELISMO?

SELECT PARALLEL FROM V$INSTANCE; 

--ESTRUTURAS DE MEMORIA

SELECT COMPONENT, CURRENT_SIZE, MIN_SIZE, MAX_SIZE
FROMO V$SGA_DYNAMIC_COMPONENTS;

--CONECTANDO A OUTRO BANCO DE DADOS

SQLPLUS SYSTETM/SENHA@NOMEDOBANCO
ORACLE_SID=XE

--NOME DO BANCO DE DADOS

SELECT NAME FROM V$DATABASE;

--VERSAO DO BANCO DE DADOS

SELECT BANNER FROM V$VERSION;

--VERIFICIANDO PRIVILEGIOS DOS USUARIOS

SELECT * FROM USER_SYS_PRIVS;

--TABELAS DO USUARIO

SELECT TABLE_NAME FROM USER_TABLES;

/*
ARMAZENAMENTO
LOGICO - TABLESPACES -> SEGMENTOS(OBJETOS) ->
EXTENSOES (ESPAACO) -> BLOCOS (DO SISTEMA OPERACIONAL)

FISICO -> DATAFILES
*/

/*
NAO PODOEMOS DETERMINAR EM QUAL ARQUIVO FISICO 
UM OBJETO FICARÁ.
*/

CREATE TABLE cursos(
	IDCURSO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	CARGA INT
)TABLESPACE USERS;

CREATE TABLE TESTE(
	IDTESTE INT,
	NOME VARCHAR2(30)
);

/* DICIONARIO DE DADOS */

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES;

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'CURSOS';

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'TESTE';

/*
TODO OBJETO É CRIADO POR PADRAO NA TABLESPACE
USERS EXCETO QUANDO SE ESTA LOGADO COM O USUARIO SYSTEM - 
ENTAO O OBJETO SERÁ CRIADO NA TABLESPACE SYSTEM
*/

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS
WHERE SEGMENT_NAME = 'CURSOS';

/* FORMATACAO DE COLUNAS */

COLUMN TABLESPACE_NAME FORMAT A20;
COLUMN SEGMENT_NAME FORMAT A20;
COLUMN SEGMENT_TYPE FORMAT A20;

/* CRIANDO TABLESPACE */

CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

--SEQUENCES

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

--CRIANDO UMA TABELA

CREATE TABLE FUNCIONARIOS(
	IDFUNCIONARIO INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;

INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');


--CRIANDO UMA TABLESPACE DE MARKETING

CREATE TABLESPACE MARKETING
ADD DATAFILE 'C:/DATA/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
	IDCAMPANHA INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE MARKETING;


INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'VERAO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'INVERNO');

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;

-- COLOCANDO A TABLESPACE OFFLINE

ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

--APONTAR O DICIONARIO DE DADOS

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_01.DBF' TO 'C:/PRODUCAO/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_02.DBF' TO 'C:/PRODUCAO/RH_02.DBF';

--TORNANDO A TABLESPACE ONLINE

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;

DROP TABLE ALUNO;

CREATE TABLE SALARIO(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

/*

DENTRO DA TABELA:
MYSQL = AUTO_INCREMENT
SQL = IDENTITY

A SQUENCE NAO PERTENCE A TABELA:
ORACLE = SEQUENCE

*/

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOAO', 'JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA', 'CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA', 'CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO;

CREATE TABLE ALUNO2(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOAO', 'JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA', 'CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA', 'CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO2;

/* ROWID = ENDERECO FISICO DO REGISTRO NO BANDO DE DADODS(SEMPRE UNICO)

E ROWNUM = PAGINAR REGISTROS
*/

SELECT ROWID, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO2;

SELECT NOME, EMAIL FROM ALUNO WHERE ROWNUM <= 2;

/* PROCEDURE */

CREATE OR REPLACE PROCEDURE BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE,
								  P_PERCENT NUMBER)
AS
	BEGIN
			UPDATE ALUNO SET SALARIO = SALARIO + (SALARIO * (P_PERCENT / 100))
			WHERE P_IDALUNO = P_IDALUNO;
	END;
	/

SELECT * FROM ALUNO;

CALL BONUS(3,10);

/* TRIGGERS*/

/* AS TRIGGERS DEVEM TER O TAMANHO MAXIMO DE 32K
NAO EXECUTAM COMANDOS DE DTL - COMMIT, ROLLBACK E SAVEPOINTS 
*/

/* VALIDACAO */

CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
		IF :NEW.SALARIO > 2000 THEN 
			RAISE_APPLICATION_ERRO(-20000, 'Apenas valores > 2K');
		END IF;
END;
/

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'MAFRA', 'MAFRA@GMAIL.COM',1000.00);

SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;

--TRIGGER DE EVENTOS

CREATE TABLE AUDITORIA(
    DATA_LOGIN DATE,
    LOGIN VARCHAR2(30)
);

CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
    INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
    VALUES(SYSDATE,USER);
END LOGPROC;
/

SELECT SYSDATE FROM DUAL;

SELECT USER FROM DUAL;

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/

--FALHA DE LOGON

CREATE OR REPLACE TRIGGER FALHA_LOGON
AFTER SERVERERROR
ON DATABASE
BEGIN
		IF (IS_SERVERERROR(1017)) THEN
			INSERT INTO AUDITORIA(DATA_LOGIN,LOGIN)
			VALUES(SYSDATE, 'ORA-1017');
		END IF;
END FALHA_LOGON;
/



