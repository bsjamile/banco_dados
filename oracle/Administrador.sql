

SHOW USER;

SELECT 1 + 1 FROM DUAL;

SELECT 1 + 1 AS SOMA FROM DUAL;

SELECT 1 + 1 AS 'SOMA' FROM DUAL;

SELECT 1 + 1, 'SOMA' FROM DUAL;

SELECT METADATA FROM SYS.KOPM$;

SELECT * FROM DICT;

SELECT PARALLEL FROM V$INSTANCE; 

SELECT COMPONENT, CURRENT_SIZE, MIN_SIZE, MAX_SIZE
FROM V$SGA_DYNAMIC_COMPONENTS;

SELECT NAME FROM V$DATABASE;

SELECT BANNER FROM V$VERSION;

SELECT * FROM USER_SYS_PRIVS;

SELECT TABLE_NAME FROM USER_TABLES;

CREATE TABLE cursos(
	IDCURSO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	CARGA INT
)TABLESPACE USERS;

CREATE TABLE TESTE(
	IDTESTE INT,
	NOME VARCHAR2(30)
);

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES;

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'CURSOS';

SELECT TABLE_NAME, TABLESPACE_NAME
FROM USER_TABLES
WHERE TABLE_NAME = 'TESTE';

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS;

SELECT SEGMENT_NAME, SEGMENT_TYPE, TABLESPACE_NAME,
BYTES, BLOCKS, EXTENTS FROM USER_SEGMENTS
WHERE SEGMENT_NAME = 'CURSOS';

COLUMN TABLESPACE_NAME FORMAT A10;
COLUMN SEGMENT_NAME FORMAT A10;
COLUMN SEGMENT_TYPE FORMAT A10;

CREATE TABLESPACE RECURSOS_HUMANOS
DATAFILE 'C:/DATA/RH_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

SELECT TABLESPACE_NAME, FILE_NAME FROM DBA_DATA_FILES;

CREATE SEQUENCE SEQ_GERAL
START WITH 100
INCREMENT BY 10;

CREATE TABLE FUNCIONARIOS(
	IDFUNCIONARIO INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE RECURSOS_HUMANOS;


INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'JOAO');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'CLARA');
INSERT INTO FUNCIONARIOS VALUES(SEQ_GERAL.NEXTVAL,'LILIAN');

SELECT * FROM FUNCIONARIOS;

ALTER TABLESPACE RECURSOS_HUMANOS
ADD DATAFILE 'C:/DATA/RH_02.DBF'
SIZE 200M AUTOEXTEND
ON NEXT 200M
MAXSIZE 4096M;

CREATE TABLESPACE MARKETING
DATAFILE 'C:/DATA/MKT_01.DBF'
SIZE 100M AUTOEXTEND
ON NEXT 100M
MAXSIZE 4096M;

CREATE TABLE CAMPANHAS(
	IDCAMPANHA INT PRIMARY KEY,
	NOME VARCHAR2(30)
)TABLESPACE MARKETING;


INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'PRIMAVERA');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'VERAO');
INSERT INTO CAMPANHAS VALUES(SEQ_GERAL.NEXTVAL,'INVERNO');

SELECT * FROM FUNCIONARIOS;
SELECT * FROM CAMPANHAS;

-- COLOCANDO A TABLESPACE OFFLINE

ALTER TABLESPACE RECURSOS_HUMANOS OFFLINE;

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_01.DBF' TO 'C:/PRODUCAO/RH_01.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS
RENAME DATAFILE 'C:/DATA/RH_02.DBF' TO 'C:/PRODUCAO/RH_02.DBF';

ALTER TABLESPACE RECURSOS_HUMANOS ONLINE;

DROP TABLE SALARIO;

CREATE TABLE ALUNO(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

CREATE SEQUENCE SEQ_EXEMPLO;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOAO', 'JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA', 'CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA', 'CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO;

CREATE TABLE ALUNO2(
	IDALUNO INT PRIMARY KEY,
	NOME VARCHAR2(30),
	EMAIL VARCHAR2(30),
	SALARIO NUMBER(10,2)
);

INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'JOAO', 'JOAO@GMAIL.COM',1000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CLARA', 'CLARA@GMAIL.COM',2000.00);
INSERT INTO ALUNO2 VALUES(SEQ_EXEMPLO.NEXTVAL, 'CELIA', 'CELIA@GMAIL.COM',3000.00);

SELECT * FROM ALUNO2;

SELECT ROWID, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO;

SELECT ROWID, ROWNUM, IDALUNO, NOME, EMAIL FROM ALUNO2;

SELECT NOME, EMAIL FROM ALUNO WHERE ROWNUM <= 2;

CREATE OR REPLACE PROCEDURE BONUS(P_IDALUNO ALUNO.IDALUNO%TYPE,
								  P_PERCENT NUMBER)
AS
	BEGIN
			UPDATE ALUNO SET SALARIO = SALARIO + (SALARIO * (P_PERCENT / 100))
			WHERE P_IDALUNO = P_IDALUNO;
	END;
	/
    
SELECT * FROM ALUNO;

CALL BONUS(3,10);

CREATE OR REPLACE TRIGGER CHECK_SALARIO
BEFORE INSERT OR UPDATE ON ALUNO
FOR EACH ROW
BEGIN
		IF :NEW.SALARIO < 2000 THEN 
			RAISE_APPLICATION_ERROR(-20000, 'Apenas valores > 2K');
		END IF;
END;
/

SHOW ERRORS;

INSERT INTO ALUNO VALUES(SEQ_EXEMPLO.NEXTVAL, 'MAFRA', 'MAFRA@GMAIL.COM',1000.00);

SELECT TRIGGER_NAME, TRIGGER_BODY
FROM USER_TRIGGERS;

--TRIGGER DE EVENTOS

CREATE TABLE AUDITORIA(
    DATA_LOGIN DATE,
    LOGIN VARCHAR2(30)
);

CREATE OR REPLACE PROCEDURE LOGPROC IS
BEGIN
    INSERT INTO AUDITORIA(DATA_LOGIN, LOGIN)
    VALUES(SYSDATE,USER);
END LOGPROC;
/

SELECT SYSDATE FROM DUAL;

SELECT USER FROM DUAL;

CREATE OR REPLACE TRIGGER LOGTRIGGER
AFTER LOGON ON DATABASE
CALL LOGPROC
/

CREATE OR REPLACE TRIGGER FALHA_LOGON
AFTER SERVERERROR
ON DATABASE
BEGIN
		IF (IS_SERVERERROR(1017)) THEN
			INSERT INTO AUDITORIA(DATA_LOGIN,LOGIN)
			VALUES(SYSDATE, 'ORA-1017');
		END IF;
END FALHA_LOGON;
/

--1004 DEFAULT USERNAME FEATURE NOT SUPPORTED
--1005 POSSWORD NULO
--1045 PRIVILEGIO INSUFICIENTE

CREATE TABLE USUARIO(
    ID INT,
    NOME VARCHAR2(30)
);

CREATE TABLE BKP_USER(
    ID INT,
    NOME VARCHAR2(30)
);

INSERT INTO USUARIO VALUES(1,'JOAO');
INSERT INTO USUARIO VALUES(2,'CLARA');
COMMIT;

SELECT * FROM USUARIO;

CREATE OR REPLACE TRIGGER LOG_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN
    INSERT INTO BKP_USER VALUES
    (:OLD.ID, :OLD.NOME);
END;
/

DELETE FROM USUARIO WHERE ID = 1;

SELECT * FROM BKP_USER;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY,
	NOME VARCHAR2(30),
	SEXO CHAR(1)
);

INSERT INTO CLIENTE VALUES(1007,'MAFRA','M');
COMMIT;

SELECT * FROM CLIENTE;

CREATE OR REPLACE VIEW V_CLIENTE
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM
    CLIENTE;
    
INSERT INTO V_CLIENTE VALUES(1008,'CLARA','F');

SELECT * FROM CLIENTE;
SELECT * FROM V_CLIENTE;

CREATE OR REPLACE VIEW V_CLIENTE_RO
AS
    SELECT IDCLIENTE, NOME, SEXO
    FROM CLIENTE
    WITH READ ONLY;
    
INSERT INTO V_CLIENTE VALUES(1009,'LILIAN','F');

--VIEW DE JOIN

CREATE OR REPLACE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE;
    
--FORCE

CREATE OR REPLACE FORCE VIEW RELATORIO
AS
    SELECT NOME, SEXO, NUMERO
    FROM CLIENTE
    INNER JOIN TELEFONE
    ON IDCLIENTE = ID_CLIENTE
    
SELECT * FROM RELATORIO;

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(10),
    ID_CLIENTE INT
);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE;

INSERT INTO TELEFONE VALUES(1, '345453355', 1007);

COMMIT;

SELECT * FROM RELATORIO;

/* DEFERRABLE CONSTRAINTS */

--DDL = CREATE,ALTER,DELETE
--DML = INSERT,UPDATE,DROP
--DTL = COMMIT E ROLLBACK

CREATE TABLE FUNCIONARIO(
    IDFUNCIONARIO INT CONSTRAINT PK_FUNCIONARIO PRIMARY KEY,
    NOME VARCHAR2(100)
);

DROP TABLE TELEFONE;

CREATE TABLE TELEFONE(
    IDTELEFONE INT PRIMARY KEY,
    NUMERO VARCHAR2(10),
    ID_FUNCIONARIO INT
);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO;

INSERT INTO FUNCIONARIO VALUES(1,'MAURICIO');
INSERT INTO TELEFONE VALUES(10,'34342454',1);

/* A CONSTRAINT DE INTEGRIDADE REFERENCIAL (FK)
CHECA A INTEGRIDADE LOGO APÓS O COMANDO DE DML 
INSERT / DELETE / UPDATE - NAO POSSIBILITANDO ASSIM
A INSERÇÃO DE REGISTROS SEM REFERENCIA */

/* NAO PODE */

INSERT INTO TELEFONE VALUES(2,'84366743',34);

DELETE FROM FUNCIONARIO WHERE IDFUNCIONARIO = 1;

SELECT * FROM TELEFONE;

/* VERIFICANDO O ESTADO DAS CONSTRAINTS */

SELECT CONSTRAINT_NAME, DEFERRABLE, DEFERRED
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');


/* APAGANDO A CONSTRAINT */

ALTER TABLE TELEFONE DROP CONSTRAINT FK_TELEFONE;

/* RECRIANDO A CONSTRAINT */

ALTER TABLE TELEFONE ADD CONSTRAINT FK_TELEFONE
FOREIGN KEY(ID_FUNCIONARIO) REFERENCES FUNCIONARIO
DEFERRABLE;

SELECT CONSTRAINT_NAME, DEFERRABLE AS ATRASADA, DEFERRED AS VERIFICACAO
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');

SELECT * FROM FUNCIONARIO;

/* MUDANDO A VERIFICACAO PARA DTL = APÓS O COMMIT */

SET CONSTRAINTS ALL DEFERRED;

SELECT CONSTRAINT_NAME, DEFERRABLE, DEFERRED
FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('FUNCIONARIO','TELEFONE');

/* SEM INTEGRIDADE REFERENCIAL*/

INSERT INTO TELEFONE VALUES(4,'4224435',10);

SELECT * FROM TELEFONE;
SELECT * FROM FUNCIONARIO;

COMMIT; /* FAZ O ROLLBACK DA TRANSACAO */